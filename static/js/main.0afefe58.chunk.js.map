{"version":3,"sources":["Components/card/card.component.jsx","Components/Card_list/cardlist.jsx","Components/Search_box/search_box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Searchbox","placeholder","handleChanger","type","onChange","App","handleChange","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAClB,6BACKL,EAAMI,QAAQE,OAEnB,4BAAIN,EAAMI,QAAQG,aCJbC,G,MAAU,SAACR,GACpB,OAAQ,qBAAKC,UAAW,YAAhB,SAEFD,EAAMS,SAASC,KACb,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJ7BM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,cAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCHG,G,wDA1Cb,aAAc,IAAD,8BACX,gBAgBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAY,IAEd,EAAKH,aAAe,EAAKA,aAAaO,KAAlB,gBAPT,E,gEAWO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKV,SAAS,CAACV,SAAUoB,S,+BAQ/B,IAAD,EAC0BC,KAAKP,MAA9Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACXW,EAAmBtB,EAASuB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASd,EAAYa,kBAElD,OACE,sBAAKhC,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,cAAeiB,KAAKb,eAEtB,cAAC,EAAD,CAAUR,SAAUsB,W,GAnCRI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0afefe58.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nexport const Card = (props) => (\n    <div className='card-container'>\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n        <h2>\n            {props.monster.name}\n        </h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList= (props) => {\n    return (<div className ='card-list'>\n        {\n          props.monsters.map(\n            monster => <Card key={monster.id} monster={monster}></Card>\n          )\n        }\n    </div>)\n}","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const Searchbox = ({placeholder, handleChanger}) => (\n    <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChanger}\n      />\n)\n\n","import React, {Component} from 'react';\nimport {CardList} from './Components/Card_list/cardlist';\nimport {Searchbox} from './Components/Search_box/search_box.component'\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField:''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    // Need to bind the handlechange to the current window to change and set its state \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response =>response.json())\n    .then(users=>this.setState({monsters: users}))\n  }\n\n  handleChange = (e) => { \n    this.setState({searchField: e.target.value});\n  }\n\n  \n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <Searchbox\n        placeholder='Search Monster'\n        handleChanger={this.handleChange}\n      />\n      <CardList monsters={filteredMonsters}>\n        \n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}